/**
 * Building on the sample skeleton for 'ui.fxml' COntroller Class generated by SceneBuilder 
 */
package comp3111.popnames;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

// Needed to use Math.round()
import java.lang.*;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;  

import comp3111.popnames.Task3.DataInTableView;
import comp3111.popnames.LinearRegressionTask6;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.MapValueFactory;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.RadioButton;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.Slider;

import java.awt.Insets;
import java.io.*;
import java.util.*;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.chart.XYChart.Data;
import javafx.stage.Stage;
import javafx.util.Pair;

import java.net.URL;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.math.BigDecimal;
import java.math.MathContext;
import java.net.URL;
import java.text.DecimalFormat;

public class Controller {

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;
    
    @FXML
    private Tab tabReport1;

    @FXML
    private ToggleGroup T1;

    @FXML
    private Tab tabReport2;

    @FXML
    private ToggleGroup T11;

    @FXML
    private Tab tabReport3;

    @FXML
    private ToggleGroup T111;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;
    
    /**
     * Task Three
     * Components on the "Task 3 Tab"
     *
     */
    @FXML
    private TextField textfieldStartingYear;
    	
    @FXML
    private TextField textfieldEndingYear;
    	
    @FXML
    private TextField textfieldNameOfInterest;
    
    @FXML
    private TextField textfieldGenderOfInterest;
    
    @FXML
    private Button buttonSummaryTask3;
    
    @FXML
    private Button buttonResetTask3;
    
    @FXML 
    private Button buttonTableViewTask3;
    
    @FXML
    private Button buttonBarChartTask3;
    
    @FXML
    private Button buttonLineChartTask3;
    
    @FXML
    private ImageView imageviewClick;
    
    @FXML
    private ImageView imageviewMillions;
    
    @FXML
    private ImageView imageviewChart;
    
    @FXML
    private ImageView imageviewWarning;
    
    @FXML
    private ImageView imageviewAnime;
    
    /**
     * Task Six
     * Components on the "Application Tab"
     *
     */
    @FXML
    private ChoiceBox<String> historyChoice;

    @FXML
    private TextArea historyText;
    
    
    @FXML
    private Label labelNameTask6;
    
    @FXML
    private Label labelYOBTask6;
    @FXML
    private Label labelGenderTask6;
    @FXML
    private Label labelTargetNameTask6;
    @FXML
    private Label labelTargetGenderTask6;
    @FXML
    private Label labelTargetYOBTask6;
    @FXML
    private Label labelPreferenceTask6;
    
    @FXML
    private Label labelAlgorithmTask6;
    
    @FXML
    private TextField textfieldNameTask6;
    
    @FXML
    private TextField textfieldTargetYOBTask6;
    @FXML
    private RadioButton radioButtonGenderMTask6;
    
    @FXML
    private RadioButton radioButtonGenderFTask6;
    
    @FXML
    private TextField textfieldYOBTask6;
    
    @FXML
    private TextField textfieldTargetNameTask6;
    
    @FXML
    private RadioButton radioButtonTargetGenderMTask6;
    @FXML
    private RadioButton radioButtonTargetGenderFTask6;
    
    @FXML
    private RadioButton radioButtonPreferenceYoungerTask6;
    
    @FXML
    private RadioButton radioButtonPreferenceOlderTask6;
    
    @FXML
    private RadioButton radioButtonAlgorithm1Task6;
    
    @FXML
    private RadioButton radioButtonAlgorithm2Task6;
    
    @FXML
    private RadioButton radioButtonAlgorithm3Task6;
    
    @FXML 
    private Button buttonTask6;
    
    @FXML
    private Button buttonViewResultTask6;
    
    @FXML
    private ProgressIndicator progressTask6;
    
    @FXML
    private Slider HobbyReadingTask6;
    
    @FXML
    private Slider HobbyGamingTask6;
    
    @FXML
    private Slider HobbySportTask6;
    
    @FXML
    private Slider HobbyNetflixTask6;
    
    @FXML
    private Label HobbytextTask6;
    
    @FXML
    private Label labelNetflixTask6;
    
    @FXML
    private Label labelGamingTask6;
    
    @FXML
    private Label labelReadingTask6;
    
    @FXML
    private Label labelSportTask6;
    
    @FXML
    private Label labelPersonalityTask6;
    
    @FXML
    private RadioButton radioButtonEruditeTask6;
    
    @FXML
    private RadioButton radioButtonSportyTask6;
    
    @FXML
    private RadioButton radioButtonHipsterTask6;
    
    @FXML
    private RadioButton radioButtonSociableTask6;
    
    @FXML
    private Button resetButtonTask6;
    

    
    //The radioButton cannot exist together. When one is selected, another must be off.
    @FXML
    void radioButtonAlgorithm1Task6() {
    	radioButtonAlgorithm1Task6.setSelected(true);
    	radioButtonAlgorithm2Task6.setSelected(false);
    	radioButtonAlgorithm3Task6.setSelected(false);
    }
    
    @FXML
    void radioButtonAlgorithm2Task6() {
    	radioButtonAlgorithm2Task6.setSelected(true);
    	radioButtonAlgorithm1Task6.setSelected(false);
    	radioButtonAlgorithm3Task6.setSelected(false);
    }
    @FXML
    void radioButtonAlgorithm3Task6() {
    	radioButtonAlgorithm3Task6.setSelected(true);
    	radioButtonAlgorithm2Task6.setSelected(false);
    	radioButtonAlgorithm1Task6.setSelected(false);
    	
    }
    @FXML
    void radioButtonPreferenceOlderTask6() {
    	radioButtonPreferenceOlderTask6.setSelected(true);
    	radioButtonPreferenceYoungerTask6.setSelected(false);
    }
    @FXML
    void radioButtonPreferenceYoungerTask6() {
    	radioButtonPreferenceYoungerTask6.setSelected(true);
    	radioButtonPreferenceOlderTask6.setSelected(false);
    }  
    @FXML
    void radioButtonTargetGenderFTask6() {
    	radioButtonTargetGenderMTask6.setSelected(false);
    	radioButtonTargetGenderFTask6.setSelected(true);
    }
    
    @FXML
    void radioButtonTargetGenderMTask6() {
    	radioButtonTargetGenderFTask6.setSelected(false);
    	radioButtonTargetGenderMTask6.setSelected(true);

    }
    
    @FXML
    void radioButtonGenderFTask6() {
    	radioButtonGenderMTask6.setSelected(false);
    	radioButtonGenderFTask6.setSelected(true);
    }
    
    @FXML
    void radioButtonGenderMTask6() {
    	radioButtonGenderFTask6.setSelected(false);
    	radioButtonGenderMTask6.setSelected(true);
    }
    
    @FXML
    void doSummary() {
    	int year = Integer.parseInt(textfieldYear.getText());
    	String oReport = AnalyzeNames.getSummary(year);
    	textAreaConsole.setText(oReport);
    }
    	
    
    /**
     * Task Three
     * To be triggered by the "Generate Report" Button on the "Task 3 Tab"
     *
     */	

    @FXML
	void doGenerateTask3() {
    	//Get the information which is inputted by the user.
		int startingYear=Integer.parseInt(textfieldStartingYear.getText());
		int endingYear=Integer.parseInt(textfieldEndingYear.getText());
		String nameOfInterest=textfieldNameOfInterest.getText();
		String genderOfInterest=textfieldGenderOfInterest.getText();
		if(genderOfInterest.length()>1 || ((Character.isLetter(genderOfInterest.charAt(0)) == false))) {
			JFrame f=new JFrame();  // check gender range  
		    JOptionPane.showMessageDialog(f,"Invalid Gender Of Interest. The Gender of Interest must be either "
		    		+ "character 'M' or 'F'.");
		    return;
		} 

		char genderOfInterestToChar=genderOfInterest.charAt(0);
		//Check other things else.
		if(!Task3.check_input(startingYear,endingYear,nameOfInterest,genderOfInterestToChar)) return; 
		
		//If the information does not fit into the range.
		//Generate error message
		boolean invisible=doSummaryTask3( startingYear, endingYear, nameOfInterest, genderOfInterest);
		if(!invisible) {
			imageviewWarning.setVisible(true);
			imageviewAnime.setVisible(true);
		}
		
		//Else Set the button visible
		if(invisible) {
			textfieldStartingYear.setEditable(false);
			textfieldEndingYear.setEditable(false);
			textfieldNameOfInterest.setEditable(false);
			textfieldGenderOfInterest.setEditable(false);
			buttonTableViewTask3.setVisible(true);
			buttonBarChartTask3.setVisible(true);
			buttonLineChartTask3.setVisible(true);
			imageviewClick.setVisible(true);
			imageviewMillions.setVisible(true);
			imageviewWarning.setVisible(false);
			imageviewAnime.setVisible(false);
			buttonResetTask3.setVisible(true);
			buttonSummaryTask3.setVisible(false);
			
		}

}    	
    /**
     * Generate Line Chart for task 3
     */
    @FXML
    void doLineChartTask3 () {  
    	
    	//Generate the Chart
    	int startingYear=Integer.parseInt(textfieldStartingYear.getText());
		int endingYear=Integer.parseInt(textfieldEndingYear.getText());
		String nameOfInterest=textfieldNameOfInterest.getText();
		String genderOfInterest=textfieldGenderOfInterest.getText();
        int [][] data=Task3.getNumberOfSameGenderOfYear(startingYear, endingYear, nameOfInterest, genderOfInterest);

        NumberAxis xAxis=new NumberAxis();
        xAxis.setLabel("Year"); 
        NumberAxis yAxis=new NumberAxis();
        yAxis.setLabel("Occurence"); 
        LineChart lineChart = new LineChart(xAxis, yAxis);
        lineChart.setTitle("Relevant results presented with a linechart");
        XYChart.Series dataSeries1 = new XYChart.Series();
        dataSeries1.setName("Popularity of the name of interest");
     
        int largest_occurence=0;
        int smallest_occurence=100000;
        int largest_year=0;
        int smallest_year=data[0][0];
        int row=0;
        int number_of_year_missing=0;
        while(data[row][0]!=0){
        	if(data[row][1]>1000) {
        		number_of_year_missing++;
        		row++;
        		continue;
        	}
             dataSeries1.getData().add(new XYChart.Data(data[row][0], data[row][2]));
             row++;
             
             if(data[row][0]>largest_year)
            	 largest_year=data[row][0];

        }
        
        //Adjust the Chart Format
        xAxis.setAutoRanging(false);
        xAxis.setLowerBound(smallest_year);
        xAxis.setUpperBound(largest_year);
        xAxis.setTickUnit(1);
        lineChart.getData().add(dataSeries1);
        
        
        //Handle the TextConsole
        String explanation="D --- Line Chart of Popularity of "+nameOfInterest+". \n";
        explanation+="Popularity of ";
        if(genderOfInterest.charAt(0)=='F') {
        	explanation+="Female";
        }else explanation+="Male";
        explanation+= " name "+ nameOfInterest+" over the period from "+ startingYear+" to "+endingYear+". \n\n";
        explanation+="Each year is associated with a point on the line chart showing the trend of the popularity of the name "+ nameOfInterest+".\n\n";
        explanation+="Data are missing for "+number_of_year_missing +" years where the name "+ nameOfInterest +" is not in the top 1000 most popular names.\n\n";
        textAreaConsole.setText(explanation);
        textAreaConsole.setEditable(false);
        
        

        //Generate an alert
    	Alert report = new Alert(AlertType.INFORMATION);
    	report.setContentText(explanation);
    	report.setGraphic(null);
        report.setTitle("Task 3---Line Chart");
        report.setHeight(800);
        report.setWidth(1500);
        report.getDialogPane().setContent(lineChart);
        report.show();
        

    }

    /**
     * Generate Bar Chart for task 3
     */
    @FXML
    void doBarChartTask3() {

    	//Get the data from the Spreadsheet
    	int startingYear=Integer.parseInt(textfieldStartingYear.getText());
		int endingYear=Integer.parseInt(textfieldEndingYear.getText());
		String nameOfInterest=textfieldNameOfInterest.getText();
		String genderOfInterest=textfieldGenderOfInterest.getText();	
        int [][] data=Task3.getNumberOfSameGenderOfYear(startingYear, endingYear, nameOfInterest, genderOfInterest);
        
        //Create XY Axis
        CategoryAxis xAxis = new CategoryAxis();
        NumberAxis yAxis = new NumberAxis();
        xAxis.setLabel("Year");       
        yAxis.setLabel("Occurence");   
        BarChart barChart = new BarChart(xAxis,yAxis);
        barChart.setTitle("Popularity of name of Interest "+nameOfInterest+" over period "+startingYear+" -- "+endingYear );
        XYChart.Series series1 = new XYChart.Series();
        series1.setName(nameOfInterest);
        
        //extract the data needed from the array which are required to generate the bar chart.
        int largest_occurence=0;
        int smallest_occurence=100000;
        int largest_year=0;
        int smallest_year=data[0][0];
        int row=0;
        int number_of_year_missing=0;
        while(data[row][0]!=0){
        	if(data[row][1]>1000) {
        		number_of_year_missing++;
        		row++;
        		continue;
        	}
             series1.getData().add(new XYChart.Data(Integer.toString(data[row][0]), data[row][2]));
             row++;
             
             if(data[row][0]>largest_year)
            	 largest_year=data[row][0];
             if (data[row][2]>smallest_occurence)
            	 largest_occurence=data[row][2];
        }
        yAxis.setUpperBound(largest_occurence);
        barChart.getData().add(series1);
        
        //Generate a textfield to explain the required summary of the chart.
        String explanation="C.  Relevant results presented with a bar chart: \n\n";
        explanation+="Popularity of ";
        if(genderOfInterest.charAt(0)=='F') {
        	explanation+="Female";
        }else explanation+="Male";
        explanation+= " name "+ nameOfInterest+" over the period from "+ startingYear+" to "+endingYear+". \n";
        explanation+="Each year is associated with a bar representing the number of occurrences of the name "+nameOfInterest+".  The longer the bar, the more popular the name.\n";
        explanation+="Data are missing for "+number_of_year_missing +" years where the name "+ nameOfInterest +" is not in the top 1000 most popular names.\n\n";
        textAreaConsole.setText(explanation);
        textAreaConsole.setEditable(false);
        
        

        //Generate an alert
    	Alert report = new Alert(AlertType.INFORMATION);
    	report.setContentText(explanation);
    	report.setGraphic(null);
        report.setTitle("Task 3---Bar Chart");
        report.setHeight(800);
        report.setWidth(1500);
        report.getDialogPane().setContent(barChart);
        report.show();
        
    }
    /**
     * Generate Table View for task 3
     */
    @FXML
    void doTableViewTask3() {
    	//Get the data from the spreadsheet
    	int startingYear=Integer.parseInt(textfieldStartingYear.getText());
		int endingYear=Integer.parseInt(textfieldEndingYear.getText());
		String nameOfInterest=textfieldNameOfInterest.getText();
		String genderOfInterest=textfieldGenderOfInterest.getText();
        int [][] data=Task3.getNumberOfSameGenderOfYear(startingYear, endingYear, nameOfInterest, genderOfInterest);
        
        //Generate a table view and observable which are reqired to create the table view.
    	TableView<DataInTableView> tableview=new TableView<DataInTableView>();
    	final ObservableList<DataInTableView> list=FXCollections.observableArrayList();
    	int number_of_year_missing=0;
    	int row=0;
    	while(data[row][0]!=0) {
    		if(data[row][1]>1000) {
        		number_of_year_missing++;
        		row++;
        		continue;
        	}
			double data1=data[row][2];
			double data2=data[row][3];	
	
			double temp =data1/data2*100;
			BigDecimal bd = new BigDecimal(temp);
			bd = bd.round(new MathContext(3));
			double rounded = bd.doubleValue();
		
        	list.add(new DataInTableView(Integer.toString(data[row][0]),Integer.toString(data[row][1]),Integer.toString(data[row][2]),Double.toString(rounded)+"%"));
             row++;
    	}
    	
    	//Create a text field to generate a summary of the chart
    	String explanation="B.  Relevant results presented with a data table: \n\n";
        explanation+="Popularity of ";
        if(genderOfInterest.charAt(0)=='F') {
        	explanation+="Female";
        }else explanation+="Male";
        explanation+= " name "+ nameOfInterest+" over the period from "+ startingYear+" to "+endingYear+". \n";
        explanation+="Data are missing for "+number_of_year_missing +" years where the name "+ nameOfInterest +" is not in the top 1000 most popular names.\n\n";
        textAreaConsole.setText(explanation);
        textAreaConsole.setEditable(false);
    	    	
    	//Generate the Table Column
        TableColumn yearCol = new TableColumn("Year");
        TableColumn rankCol = new TableColumn("Rank");
        TableColumn occurenceCol = new TableColumn("Occurence");
        TableColumn percentageCol = new TableColumn("Percentage");
        yearCol.setCellValueFactory(new PropertyValueFactory<DataInTableView, String>("year"));
        rankCol.setCellValueFactory(new PropertyValueFactory<DataInTableView, String>("rank"));
        occurenceCol.setCellValueFactory(new PropertyValueFactory<DataInTableView, String>("occurence"));
        percentageCol.setCellValueFactory(new PropertyValueFactory<DataInTableView, String>("percentage"));
        
        //Adjust the Size of the Column
        yearCol.setPrefWidth(150);
        rankCol.setPrefWidth(150);
        occurenceCol.setPrefWidth(150);
        percentageCol.setPrefWidth(150);
       
        //Combine all the columns into the table
        tableview.getColumns().addAll(yearCol, rankCol, occurenceCol,percentageCol);
        tableview.setItems(list);

        
        textAreaConsole.setText(explanation);
        textAreaConsole.setEditable(false);
        
        

        //Generate an alert
    	Alert report = new Alert(AlertType.INFORMATION);
    	report.setContentText(explanation);
    	report.setGraphic(null);
        report.setTitle("Task 2---Table Chart");
        report.setHeight(800);
        report.setWidth(1500);
        report.getDialogPane().setContent(tableview);
        report.show();
    }
      	
    /**
     * Reset the task 3.
     */
    @FXML
    void resetTask3() {
    	textfieldStartingYear.setEditable(true);
		textfieldEndingYear.setEditable(true);
		textfieldNameOfInterest.setEditable(true);
		textfieldGenderOfInterest.setEditable(true);
		textfieldStartingYear.setText(null);
		textfieldEndingYear.setText(null);
		textfieldNameOfInterest.setText(null);
		textfieldGenderOfInterest.setText(null);
		buttonTableViewTask3.setVisible(false);
		buttonBarChartTask3.setVisible(false);
		buttonLineChartTask3.setVisible(false);
		imageviewClick.setVisible(false);
		imageviewMillions.setVisible(false);
		imageviewWarning.setVisible(false);
		imageviewAnime.setVisible(false);
		buttonResetTask3.setVisible(false);
		buttonSummaryTask3.setVisible(true);
		textAreaConsole.setText(null);
    }
    /**
     * Task Three To be triggered by the generate Button on the Task Three Tab
     */
    @FXML
	boolean doSummaryTask3(int startingYear,int endingYear,String nameOfInterest,String genderOfInterest) {
		int[][]dataStorage=Task3.getNumberOfSameGenderOfYear(startingYear,endingYear,nameOfInterest,genderOfInterest);
		int mostPopularYear=Task3.getYearOfMostPopular(dataStorage);
		if (mostPopularYear==0) 
		{
			JFrame f=new JFrame();
			JOptionPane.showMessageDialog(f,"The name of interest you have chosen does not appear in our database.\n"
					+ " It may be due to the fact that the name of interest is not the most top 1000 popular name\n"
					+ " from the starting Year and Ending Year. You could try another range or name of interest.");
			textAreaConsole.setText("The name of interest you have chosen does not appear in our database.\n"
					+ " It may be due to the fact that the name of interest is not the most top 1000 popular name\n"
					+ " from the starting Year and Ending Year. You could try another range or name of interest.\n");
			return false;
		}
		else 
		{
			String record=("A. Summary of Results: \n \n"
				+ "The year when the name " + nameOfInterest+" was most popular is ");
			for (int i=0;i<140;i++) {
				if(dataStorage[i][1]==dataStorage[mostPopularYear-startingYear][1])
					record+=String.valueOf(dataStorage[i][0])+",";
			}
			record+=".\n";
			for (int row=0;row<140;row++) {
				if(dataStorage[row][1]==dataStorage[mostPopularYear-startingYear][1]) {
					double data1=dataStorage[row][2];
					double data2=dataStorage[row][3];
					double temp =data1/data2*100;
					BigDecimal bd = new BigDecimal(temp);
					bd = bd.round(new MathContext(3));
					double rounded = bd.doubleValue();
					record+="In "+dataStorage[row][0]+" , the number of occurrences is "+dataStorage[row][2]+", which represents "+ rounded +"% of total same gender births in " + dataStorage[row][0] +" at rank "+ dataStorage[row][1]+".\n";
			}
			}
			record+="\n For more information, please click the Data Table Button, Bar Chart Button, Line Chart Button. \n";
			textAreaConsole.setText(record);
		}
		return true;
		}    	
    	
    /**
     * Read the input entered by the user
     */
    	@FXML
    	void doTask6() {
			String userGender="F";
			String targetGender="F";
			String userPreference="Younger";
			int userYOB=Integer. parseInt(textfieldYOBTask6.getText());
    		String userName =textfieldNameTask6.getText();
    		String TargetName=textfieldTargetNameTask6.getText();
    		String algorithmTask6="T6X1";
    		
    		if(radioButtonGenderMTask6.isSelected()) {
    			userGender="M";
    		}
    		
    		if(radioButtonTargetGenderMTask6.isSelected()) {
    			targetGender="M";
    		}
    		
    		if(radioButtonPreferenceOlderTask6.isSelected()) {
    			userPreference="Older";
    		}
    		
    		if(radioButtonAlgorithm2Task6.isSelected()) {
    			algorithmTask6="T6X2";
    		}
    		if(radioButtonAlgorithm3Task6.isSelected()) {
    			algorithmTask6="T6X3";
    		}
    		/**
    		 * Check the input
    		 **/
    		if(!Task6.check_name(userName,TargetName)) {return;}
    		if(!Task6.check_YOB(userYOB)) {return;}
    		
    		
    		double compatability=0;
    		textfieldNameTask6.setEditable(false);
    		textfieldTargetNameTask6.setEditable(false);
    		textfieldYOBTask6.setEditable(false);
    		radioButtonGenderMTask6.setDisable(true);
    		radioButtonGenderFTask6.setDisable(true);
    		radioButtonTargetGenderMTask6.setDisable(true);
    		radioButtonTargetGenderFTask6.setDisable(true);
    		radioButtonPreferenceOlderTask6.setDisable(true);
    		radioButtonPreferenceYoungerTask6.setDisable(true);
    		radioButtonAlgorithm2Task6.setDisable(true);
    		radioButtonAlgorithm3Task6.setDisable(true);
    		radioButtonAlgorithm1Task6.setDisable(true);
    		
    		/**
    		 * Generate T6X1 compatability Score
    		 **/
    		if(algorithmTask6=="T6X1") {
    			compatability=Task6.doTask6_T6X1(userName, TargetName);
    		}
    		/**
    		 * Ask for more information of T6X2 algorithm
    		 * 
    		 **/
    		else if(algorithmTask6=="T6X2") {
    			buttonTask6.setVisible(false);
    			HobbytextTask6.setVisible(true);
    			labelNetflixTask6.setVisible(true);
    			labelGamingTask6.setVisible(true);
    			labelReadingTask6.setVisible(true);
    			labelNetflixTask6.setVisible(true);
    			labelSportTask6.setVisible(true);
    			HobbyNetflixTask6.setVisible(true);
    			HobbyGamingTask6.setVisible(true);
    			HobbyReadingTask6.setVisible(true);
    			HobbySportTask6.setVisible(true);
    			buttonViewResultTask6.setVisible(true);
    			labelPersonalityTask6.setVisible(true);
    			radioButtonEruditeTask6.setVisible(true);
    			radioButtonSportyTask6.setVisible(true);
    			radioButtonHipsterTask6.setVisible(true);
    			radioButtonSociableTask6.setVisible(true);
    			buttonViewResultTask6.setVisible(true);
    			textAreaConsole.setText("Please give mark to your hobby and select the personalities of your target. \n"
    					+ "After the selection, please click the view result button to see the result.\n");
        	}
    		/**
    		 * Generate T6X3 compatability Score
    		 * Handle message if cannot find the name in dataset
    		 **/
    		else if(algorithmTask6=="T6X3") {
    			buttonTask6.setVisible(false);
    			resetButtonTask6.setVisible(true);
    			if(!Task6.check_dataset(userName, TargetName)) {
    				textAreaConsole.setText("Either your userName or targetName cannot be found in our database. Please use another name instead.");
    				return;
    			}
    			int closestYear=doTask6_3(userName,userGender,TargetName,targetGender,1900,2000);
    			if (closestYear==2002) {
    				textAreaConsole.setText("Sorry. We cannot find the either userName or targetName in our database.\n"
    						+ "Please try another name instear.");
    			}else
    			textAreaConsole.setText("T6X3 is generated by linear regression from the database, ranging from 1900 to 2000.\n"
    					+ "The closest Year of the name of occurence is Year "+ closestYear+" which means you two would be closest if"
    							+ " both of you are born near Year "+closestYear+".\n");
    			return;
        	}
    		
    		/**
    		 * T6X1: Perfect Case
    		 */
    		if(algorithmTask6=="T6X1"&& compatability==100) {
    			buttonViewResultTask6.setVisible(false);
    			textAreaConsole.setText("Wow. You have the same length of string in the name. You are definitely the choosen. \n"
    					+ "The compatibility score is 100%. \n"
    					+ "Although this is the worst algorithm, it still be adopted by many villages. \n"
    					+ "Please try the modern and more accurate algorithm (click T6X2 and T6X3)! \n");
    			setCompatibilty(compatability);
    		}
    		
    		/**
    		 * T6X1: Zero mark Case
    		 */
    		if(algorithmTask6=="T6X1"&& compatability==0) {
    			buttonViewResultTask6.setVisible(false);
    			textAreaConsole.setText("Oh... You don't have the same length of string in the name. \n"
    					+ "No worries. This is the worst algorithm, it is only be adopted by the old villages. \n"
    					+ "Please try the modern and more accurate algorithm (click T6X2 and T6X3)! \n");
    			setCompatibilty(compatability);
    		}
    	}
    	
    	
    	/**
    	 * After generating the score. We need to demostrate it.
    	 * @param compatability
    	 */
    	@FXML
    	public void setCompatibilty(double compatability) {
    		// jump to another page
    		//loadSecond();
    		progressTask6.setProgress(compatability);
    		resetButtonTask6.setVisible(true);
    		buttonTask6.setVisible(false);	
    	}
    	 
    	/**
    	 * Normalize the data and do the prediction 
    	 */
    	@FXML 
    	public void doTask6_2() {
    		double gamingScore=HobbyGamingTask6.getValue();
    		double netflixScore=HobbyNetflixTask6.getValue();
    		double readingScore=HobbyReadingTask6.getValue();
    		double sportScore=HobbySportTask6.getValue();
    		String preference="";
    		if(radioButtonPreferenceYoungerTask6.isSelected()) {
    			preference="Younger";
    			
    		}else preference="Older";
    		boolean sporty=radioButtonSportyTask6.isSelected();
    		boolean hipster=radioButtonHipsterTask6.isSelected();
    		boolean erudite=radioButtonEruditeTask6.isSelected();
    		boolean sociable=radioButtonSociableTask6.isSelected();
    		
    		double compatibility=Task6.doTask6_T6X2(Integer. parseInt(textfieldYOBTask6.getText()),Integer. parseInt(textfieldTargetYOBTask6.getText()), gamingScore, netflixScore, readingScore,sportScore,erudite,sporty,hipster,sociable,preference);
    		
    		textAreaConsole.setText("This is algorithm T6X2, which is a algorithm generated base on your personalitites, preferences, and multiple regression.\n"
    				+ "Your Compatability score is "+ compatibility+" .\n");
    		setCompatibilty(compatibility/100);
    	}
    	
    	/**
    	 * 
    	 * @param userName 
    	 * @param userGender 
    	 * @param targetName
    	 * @param targetGender
    	 * @param startingYear
    	 * @param endingYear
    	 * @return
    	 */
    	public int doTask6_3(String userName, String userGender, String targetName,String targetGender,int startingYear, int endingYear) {
    		//Generate the Chart
    		String nameOfInterest=userName;
    		String genderOfInterest=userGender;
            int [][] data1=Task3.getNumberOfSameGenderOfYear(startingYear, endingYear, nameOfInterest, genderOfInterest);

            NumberAxis xAxis=new NumberAxis();
            xAxis.setLabel("Year"); 
            NumberAxis yAxis=new NumberAxis();
            yAxis.setLabel("Occurence"); 
            LineChart lineChart = new LineChart(xAxis, yAxis);
            lineChart.setTitle("Relevant results presented with a linechart");
            XYChart.Series dataSeries1 = new XYChart.Series();
            dataSeries1.setName("Popularity of "+" Your Name.");
            XYChart.Series dataSeries2 = new XYChart.Series();
            dataSeries2.setName("Popularity of "+" Target Name.");
            XYChart.Series dataSeries3 = new XYChart.Series();
            dataSeries3.setName("User Name Regression Results");
            XYChart.Series dataSeries4 = new XYChart.Series();
            dataSeries4.setName("Target Name Regression Results");
            double [] regression_x_user=new double[endingYear-startingYear];
            double [] regression_y_user=new double[endingYear-startingYear];
            

            int largest_occurence=0;
            int row=0;
            //Record the largest occurence
            while(data1[row][0]!=0){
                 if (data1[row][2]>largest_occurence)
                	 largest_occurence=data1[row][2];
                 regression_x_user[row]=data1[row][0];
             	regression_y_user[row]=data1[row][2];
                 dataSeries1.getData().add(new XYChart.Data(data1[row][0], (data1[row][2])));
                 row++;
            }
            double [] regression_prediction_user=new double[endingYear-startingYear];

            LinearRegressionTask6 userRegressionResult=new LinearRegressionTask6(regression_x_user,regression_y_user);
            row=0;
            while(data1[row][0]!=0) {
            	regression_prediction_user[row]=userRegressionResult.predict(data1[row][0]);
            dataSeries3.getData().add(new XYChart.Data(data1[row][0],userRegressionResult.predict(data1[row][0])));
            row++;
            }
            
            double [] regression_x_target=new double[endingYear-startingYear];
            double [] regression_y_target=new double[endingYear-startingYear];
            nameOfInterest=targetName;
            genderOfInterest=targetGender;
            int [][] data=Task3.getNumberOfSameGenderOfYear(startingYear, endingYear, nameOfInterest, genderOfInterest);
            
            row=0;
            while(data[row][0]!=0){
            	if (data[row][2]>largest_occurence)
               	 largest_occurence=data[row][2];
            	regression_x_target[row]=data[row][0];
            	regression_y_target[row]=data[row][2];
                dataSeries2.getData().add(new XYChart.Data(data[row][0], (data[row][2])));
                 row++;
            }
            double [] regression_prediction_target=new double[endingYear-startingYear];
            
            LinearRegressionTask6 targetRegressionResult=new LinearRegressionTask6(regression_x_target,regression_y_target);
            row=0;
            while(data[row][0]!=0){
            	regression_prediction_target[row]=targetRegressionResult.predict(data[row][0]);

            dataSeries4.getData().add(new XYChart.Data(data[row][0],targetRegressionResult.predict(data[row][0])));
            row++;
            }
            

            //Adjust the Chart Format
            xAxis.setAutoRanging(false);
            xAxis.setLowerBound(startingYear);
            xAxis.setUpperBound(endingYear);
            xAxis.setTickUnit(1);
            yAxis.setLowerBound(0);
            lineChart.getData().add(dataSeries1);
            lineChart.getData().add(dataSeries2);
            lineChart.getData().add(dataSeries3);
            lineChart.getData().add(dataSeries4);
            
            double min=1000000;
            row=0;
            int min_year=2002;

            while(row<(endingYear-startingYear)) {
            	if((min>Math.abs(regression_prediction_target[row]-regression_prediction_user[row])&&(Math.abs(regression_prediction_target[row]-regression_prediction_user[row]))!=0)) {
            		min_year=row;
            		min=Math.abs(regression_prediction_target[row]-regression_prediction_user[row]);
            	}
            	row++;
            }
            
            if(min_year==2002) {
            	return 2002;
            }
            
            //Generate an alert
        	Alert report = new Alert(AlertType.INFORMATION);
        	report.setGraphic(null);
            report.setTitle("Task 6---Linear Regression");
            report.setHeight(800);
            report.setWidth(1500);
            report.getDialogPane().setContent(lineChart);
            report.show();
            
           
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
            LocalDateTime now = LocalDateTime.now();  
            writeNewUser(userName,userGender,targetName,targetGender,startingYear,endingYear,min_year,now); 
            return min_year+startingYear-1;
            
            
    	}
    	/**
    	 * Write Data to the txt file
    	 * @param userName
    	 * @param userGender
    	 * @param targetName
    	 * @param targetGender
    	 * @param startingYear
    	 * @param endingYear
    	 * @param minyear
    	 * @param now
    	 */
    	public void writeNewUser(String userName, String userGender, String targetName, String targetGender,int startingYear, int endingYear,int minyear,LocalDateTime now) {      
    	    try {
    	    	URL path=getClass().getResource("Task6_DataRecord.txt");
    	    	int adjustedYear=startingYear+minyear-1;
    	    	
    	        BufferedWriter bw = new BufferedWriter(new FileWriter(("Task6_DataRecord.txt")));
    	        bw.write("Data and Time = "+now);
    	        bw.newLine();
    	        bw.write("Algorithm = "+"T6X3");
    	        bw.newLine();
    	        bw.write("User Name = "+userName);
    	        bw.newLine();
    	        bw.write("user Gender = "+userGender);
    	        bw.newLine();
    	        bw.write("Target Name= "+targetName);
    	        bw.newLine();
    	        bw.write("Target Gender = "+targetGender);
    	        bw.newLine();
    	        bw.write("Starting Year = "+startingYear);
    	        bw.newLine();
    	        bw.write("Ending Year = "+endingYear);
    	        bw.newLine();
    	        bw.write("The closest Year = "+ adjustedYear);
    	        bw.close();
    	    } catch (IOException e) {
    	        e.printStackTrace();
    	    }
    	}
    	
    	
    	/**
    	 * reset to the orginal site
    	 */
    	@FXML
    	private void resetTask6() {
    		textfieldNameTask6.setEditable(true);
    		textfieldTargetNameTask6.setEditable(true);
    		textfieldYOBTask6.setEditable(true);
    		radioButtonGenderMTask6.setDisable(false);
    		radioButtonGenderFTask6.setDisable(false);
    		radioButtonTargetGenderMTask6.setDisable(false);
    		radioButtonTargetGenderFTask6.setDisable(false);
    		radioButtonPreferenceOlderTask6.setDisable(false);
    		radioButtonPreferenceYoungerTask6.setDisable(false);
    		radioButtonAlgorithm2Task6.setDisable(false);
    		radioButtonAlgorithm3Task6.setDisable(false);
    		radioButtonAlgorithm1Task6.setDisable(false);
    		buttonTask6.setVisible(true);
    		resetButtonTask6.setVisible(false);
    		textAreaConsole.setText(null);
    		progressTask6.setProgress(0);
    		HobbyGamingTask6.setVisible(false);
    		HobbyNetflixTask6.setVisible(false);
    		HobbytextTask6.setVisible(false);
    		labelNetflixTask6.setVisible(false);
    		labelGamingTask6.setVisible(false);
    		labelReadingTask6.setVisible(false);
    		labelSportTask6.setVisible(false);
    		HobbyReadingTask6.setVisible(false);
    		HobbySportTask6.setVisible(false);
    		labelPersonalityTask6.setVisible(false);
    		radioButtonEruditeTask6.setVisible(false);
    		radioButtonSportyTask6.setVisible(false);
    		radioButtonHipsterTask6.setVisible(false);
    		radioButtonSociableTask6.setVisible(false);
    		resetButtonTask6.setVisible(false);


    		}
    	

    	
    	
    	
    /**
     *  Task Zero
     *  To be triggered by the "Rank (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankF() {
    	String oReport = "";
    	String iNameF = textfieldNameF.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameF, "F");
    	if (oRank == -1)
    		oReport = String.format("The name %s (female) has not been ranked in the year %d.\n", iNameF, iYear);
    	else
    		oReport = String.format("Rank of %s (female) in year %d is #%d.\n", iNameF, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }
    @FXML
    void doRankM() {
    	String oReport = "";
    	String iNameM = textfieldNameM.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameM, "M");
    	if (oRank == -1)
    		oReport = String.format("The name %s (male) has not been ranked in the year %d.\n", iNameM, iYear);
    	else
    		oReport = String.format("Rank of %s (male) in year %d is #%d.\n", iNameM, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }
    @FXML
    void doTopF() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (female) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "F"));
    	textAreaConsole.setText(oReport);
    }

    @FXML
    void doTopM() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (male) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "M"));
    	textAreaConsole.setText(oReport);
    }
   
    
    
    
    
    
    
    
    

  

}
    
    

